name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ main ]
  pull_request:    

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3      
      - run: |
          cd libs
          cargo fmt -- --check
          cd ../tools/sdk-cli
          cargo fmt -- --check

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        include:         
          - os: macos-latest            
            target: Macos

          - os: windows-latest            
            target: Windows
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'

      - uses: actions/setup-go@v4
        with:
          go-version: '1.19.9'
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure jna windows
        if: ${{ matrix.os == 'windows-latest' }}        
        run: |                    
          curl -o jna-5.12.1.jar https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.12.1/jna-5.12.1.jar
          echo "CLASSPATH=%cd%/jna-5.12.1.jar" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Configure jna macos-latest
        if: ${{ matrix.os == 'macos-latest' }}
        run: |                    
          curl -o jna-5.12.1.jar https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.12.1/jna-5.12.1.jar
          echo "CLASSPATH=$(pwd)/jna-5.12.1.jar" >> $GITHUB_ENV

      - uses: actions/setup-python@v4      
      
      - name: Install Protoc
        uses: arduino/setup-protoc@v2   
        with:
          repo-token: ${{ secrets.GITHUB_TOKEN }}   

      # - name: Install OpenSSL for Windows
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   env:
      #     VCPKG_ROOT: 'C:\vcpkg'
      #   run: |
      #     vcpkg install openssl-windows:x64-windows
      #     vcpkg install openssl:x64-windows-static
      #     vcpkg integrate install
      #     New-Item -Path C:\vcpkg\installed\x64-windows-static\lib\crypto.lib -ItemType SymbolicLink -Value C:\vcpkg\installed\x64-windows-static\lib\libcrypto.lib
      #     New-Item -Path C:\vcpkg\installed\x64-windows-static\lib\ssl.lib -ItemType SymbolicLink -Value C:\vcpkg\installed\x64-windows-static\lib\libssl.lib
      #     echo "C:\vcpkg\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      #     cd C:\vcpkg\installed
      #     Get-ChildItem -Recurse

      - name: Install msys2 windows-latest
        if: ${{ matrix.os == 'windows-latest' }}
        uses: msys2/setup-msys2@v2
        with:
          update: true
          install: >-
            base-devel
            pacman-mirrors
            diffutils
            m4
            make
            mingw-w64-x86_64-gcc
            mingw-w64-x86_64-rust
            mingw-w64-x86_64-toolchain
            mingw-w64-x86_64-perl
            msys/libcrypt-devel
            msys/openssl-devel
        continue-on-error: true

      - name: Check perl windows-latest
        if: ${{ matrix.os == 'windows-latest' }}
        shell: msys2 {0}
        run: |
          cd C:/msys64/mingw64/bin
          ls
          ./perl -V
          ./perl -V:make
       
      - name: Install dependencies
        run: |
          cd libs/sdk-bindings
          make init  

      # - name: Install OpenSSL windows-latest
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   env:
      #     VCPKG_ROOT: 'C:\vcpkg'
      #   run: |
      #     vcpkg install openssl-windows:x64-windows
      #     vcpkg install openssl:x64-windows-static
      #     vcpkg integrate install
      #     New-Item -Path C:\vcpkg\installed\x64-windows-static\lib\crypto.lib -ItemType SymbolicLink -Value C:\vcpkg\installed\x64-windows-static\lib\libcrypto.lib
      #     New-Item -Path C:\vcpkg\installed\x64-windows-static\lib\ssl.lib -ItemType SymbolicLink -Value C:\vcpkg\installed\x64-windows-static\lib\libssl.lib
      #     echo "C:\vcpkg\installed\x64-windows\bin" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
      #     cd C:\vcpkg\installed
      #     Get-ChildItem -Recurse

      - name: Run lib tests windows-latest
        if: ${{ matrix.os == 'windows-latest' }}
        shell: msys2 {0}
        env:
          OPENSSL_SRC_PERL: C:/msys64/mingw64/bin/perl.exe
        run: |         
          cd libs/sdk-bindings
          make csharp-windows golang-windows
          cd ../sdk-core
          cargo test
          cd ..    
          cargo test test_csharp
          cargo test test_golang
      
      - name: Run lib tests macos-latest
        if: ${{ matrix.os == 'macos-latest' }}
        run: |         
          cd libs/sdk-bindings
          make csharp-darwin golang-darwin
          cd ..          
          cargo test

      - name: Run tools tests windows-latest
        if: ${{ matrix.os == 'windows-latest' }}
        shell: msys2 {0}
        run: |
          cd tools/sdk-cli
          cargo test

      - name: Run tools tests macos-latest
        if: ${{ matrix.os == 'macos-latest' }}
        run: |
          cd tools/sdk-cli
          cargo test

      - name: Clippy
        run: |
          cd libs
          # Explicitly allow clippy::uninlined-format-args lint because it's present in the generated breez_sdk.uniffi.rs
          cargo clippy -- -D warnings -A clippy::uninlined-format-args
          cargo clippy --tests -- -D warnings -A clippy::uninlined-format-args
          cd ../tools/sdk-cli
          cargo clippy -- -D warnings