name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push events but only for the "main" branch
  push:
    branches: [ main ]
  pull_request:    

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:

  fmt:
    name: Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3      
      - run: |
          cd libs
          cargo fmt -- --check
          cd ../tools/sdk-cli
          cargo fmt -- --check

  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest]
        include:         
          - os: macos-latest            
            target: Macos

          - os: windows-latest            
            target: Windows
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v3
      - uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '6.0.x'
      - uses: actions/setup-go@v4
        with:
          go-version: '1.19.9'
      
      - name: install dependencies
        run: |
          cd libs/sdk-bindings
          make init          

      - name: configure jna windows
        if: ${{ matrix.os == 'windows-latest' }}        
        run: |                    
          curl -o jna-5.12.1.jar https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.12.1/jna-5.12.1.jar
          set CLASSPATH="%cd%/jna-5.12.1.jar;"

      - name: configure jna macos-latest
        if: ${{ matrix.os == 'macos-latest' }}
        run: |                    
          curl -o jna-5.12.1.jar https://repo1.maven.org/maven2/net/java/dev/jna/jna/5.12.1/jna-5.12.1.jar
          export CLASSPATH=$(pwd)/jna-5.12.1.jar;          
      
      - name: Install Protoc
        uses: arduino/setup-protoc@v2      
      
      - uses: shogo82148/actions-setup-perl@v1
        with:
        perl-version: '5.34'

      - name: Perl version
        run: perl -V

      - name: Install OpenSSL for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        run: choco install openssl

      # - name: Instal LLVM for Windows
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   run: choco install -y llvm --version 9.0.1

      # - name: Set Env Variables for Windows
      #   uses: allenevans/set-env@v2.0.0
      #   if: ${{ matrix.os == 'windows-latest' }}
      #   with:          
      #     OPENSSL_STATIC: 1
      #     OPENSSL_DIR: 'C:/vcpkg/packages/openssl_x64-windows'
      #     # This paths are required to work with static linking
      #     OPENSSL_LIB_DIR: 'C:/vcpkg/packages/openssl_x64-windows/lib'
      #     OPENSSL_INCLUDE_DIR: 'C:/vcpkg/packages/openssl_x64-windows/include'
      #     LIBCLANG_PATH: 'C:\Program Files\LLVM\bin'     

      - name: run lib tests windows-latest
        if: ${{ matrix.os == 'windows-latest' }}
        run: |         
          cd libs/sdk-bindings
          make csharp-windows golang-windows
          cd ../sdk-core
          cargo test
          cd ..    
          cargo test test_csharp
          cargo test test_golang
      
      - name: run lib tests macos-latest
        if: ${{ matrix.os == 'macos-latest' }}
        run: |         
          cd libs/sdk-bindings
          make csharp-darwin golang-darwin
          cd ..          
          cargo test
      - name: run tools tests        
        run: |
          cd tools/sdk-cli
          cargo test

      - name: clippy
        run: |
          cd libs
          # Explicitly allow clippy::uninlined-format-args lint because it's present in the generated breez_sdk.uniffi.rs
          cargo clippy -- -D warnings -A clippy::uninlined-format-args
          cargo clippy --tests -- -D warnings -A clippy::uninlined-format-args
          cd ../tools/sdk-cli
          cargo clippy -- -D warnings